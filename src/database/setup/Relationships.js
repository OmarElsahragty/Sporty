export default ({
  Users,

  Cites,
  Regions,
  Sports,

  Groups,
  GroupRoles,
  GroupMembers,

  Events,
  EventMembers,

  Configurations,
}) => {
  // GENERATED BY SEQUELIZE AUTO

  Events.belongsToMany(Users, {
    as: "userId_Users",
    through: EventMembers,
    foreignKey: "eventId",
    otherKey: "userId",
  });
  Groups.belongsToMany(Users, {
    as: "userId_Users_GroupMembers",
    through: GroupMembers,
    foreignKey: "groupId",
    otherKey: "userId",
  });
  Users.belongsToMany(Events, {
    as: "eventId_Events",
    through: EventMembers,
    foreignKey: "userId",
    otherKey: "eventId",
  });
  Users.belongsToMany(Groups, {
    as: "groupId_Groups",
    through: GroupMembers,
    foreignKey: "userId",
    otherKey: "groupId",
  });
  Regions.belongsTo(Cites, { as: "city", foreignKey: "cityId" });
  Cites.hasMany(Regions, { as: "Regions", foreignKey: "cityId" });
  EventMembers.belongsTo(Events, { as: "event", foreignKey: "eventId" });
  Events.hasMany(EventMembers, { as: "EventMembers", foreignKey: "eventId" });
  Configurations.belongsTo(GroupRoles, {
    as: "GroupDefaultRole_GroupRole",
    foreignKey: "GroupDefaultRole",
  });
  GroupRoles.hasMany(Configurations, {
    as: "Configurations",
    foreignKey: "GroupDefaultRole",
  });
  GroupMembers.belongsTo(GroupRoles, {
    as: "groupRole",
    foreignKey: "groupRoleId",
  });
  GroupRoles.hasOne(GroupMembers, {
    as: "GroupMember",
    foreignKey: "groupRoleId",
  });
  Events.belongsTo(Groups, { as: "group", foreignKey: "groupId" });
  Groups.hasMany(Events, { as: "Events", foreignKey: "groupId" });
  GroupMembers.belongsTo(Groups, { as: "group", foreignKey: "groupId" });
  Groups.hasMany(GroupMembers, { as: "GroupMembers", foreignKey: "groupId" });
  Groups.belongsTo(Regions, { as: "groupRegion", foreignKey: "region" }); // ! Modified From region_Region groupRegion
  Regions.hasMany(Groups, { as: "Groups", foreignKey: "region" });
  Events.belongsTo(Sports, { as: "activity_Sport", foreignKey: "activity" });
  Sports.hasMany(Events, { as: "Events", foreignKey: "activity" });
  EventMembers.belongsTo(Users, { as: "user", foreignKey: "userId" });
  Users.hasMany(EventMembers, { as: "EventMembers", foreignKey: "userId" });
  GroupMembers.belongsTo(Users, { as: "user", foreignKey: "userId" });
  Users.hasMany(GroupMembers, { as: "GroupMembers", foreignKey: "userId" });
};
